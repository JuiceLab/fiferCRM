@{
    ViewBag.Title = "Fifer Контроль пользователей";
}

<div>
    <ul class="breadcrumb">
        <li>
            <span>@ViewBag.Title</span>
        </li>
    </ul>
</div>
<div class="sortable row-fluid">

</div>

<div class="row-fluid">
    <div class="box span12">
        <div class="box-header well">
            <h2><i class="icon-info-sign"></i>@ViewBag.Title</h2>
            <div class="box-icon">
                <a href="#" class="btn btn-minimize btn-round" onclick="loadModalContent('myModal','UserModal','user', '')" title="Добавить пользователя"><i class="icon-plus"></i></a>
                <a href="#" title="Свернуть" class="btn btn-minimize btn-round"><i class="icon-chevron-up"></i></a>
                <a href="#" title="Закрыть" class="btn btn-close btn-round"><i class="icon-remove"></i></a>
            </div>
        </div>
        <div class="box-content">
@(Html.Kendo().TabStrip()
          .Name("tabstrip")
          .Items(tabstrip =>
          {
              tabstrip.Add().Text("Online")
                  .Selected(true)
                  .Content(@<text>
                    @(Html.Kendo().Grid<UserViewModel>()
                      .Name("Online")
                       .Columns(columns =>
                        {
                            columns.Bound(p => p.UserId).Visible(false);
                            columns.Bound(p => p.Login).ClientTemplate("<a href='/User/Index?userId=#= UserId #' > #=Login #</a>");
                            columns.Bound(p => p.FullName);
                            columns.Bound(p => p.Mail);
                            columns.Bound(p => p.Phone);
                            //columns.Bound(p => p.Department);
                            //columns.Bound(p => p.Position);
                            columns.Bound(p => p.IsOnline).ClientTemplate("<i class='icon-large # if(IsOnline){# icon-ok-sign' style='color:green' # }else {# icon-remove-sign' style='color:red' #} #> </i>#if(SessionExpired){# истекло время сессии#}#");
                            columns.Bound(p => p.LastLogin).Format("{0:dd.MM.yy HH:mm:ss}");
                        })
                        .HtmlAttributes(new
                        {
                            style = "height:1500px"
                        })
                        .Groupable()
                        .Pageable(pager => pager.Refresh(true))
                        .Scrollable()
                        .Filterable()
                        .Sortable()
                            .Sortable(sorting => sorting.Enabled(true).SortMode(GridSortMode.SingleColumn))
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(50)
                                .Read(read => read.Action("GetUserOnlineGrid", "GridData")
                        )))</text>);
              tabstrip.Add().Text("Все пользователи")
                       .Selected(false)
                       .Content(@<text>
                        @(Html.Kendo().Grid<UserViewModel>()
                      .Name("Users")
                       .Columns(columns =>
                        {
                            columns.Bound(p => p.UserId).Visible(false);
                            columns.Bound(p => p.Login).ClientTemplate("<a href='/User/Index?userId=#= UserId #' > #=Login #</a>");
                            columns.Bound(p => p.FullName);
                            columns.Bound(p => p.Mail);
                            columns.Bound(p => p.Phone);
                            //columns.Bound(p => p.Department);
                            //columns.Bound(p => p.Position);
                            columns.Bound(p => p.IsOnline).ClientTemplate("<i class='icon-large # if(IsOnline){# icon-ok-sign' style='color:green' # }else {# icon-remove-sign' style='color:red' #} #> </i>");
                            columns.Bound(p => p.LastLogin).Format("{0:dd.MM.yy HH:mm:ss}");
                        })
                        .HtmlAttributes(new
                        {
                            style = "height:1500px"
                        })
                        .Groupable()
                        .Pageable(pager => pager.Refresh(true))
                        .Scrollable()
                        .Filterable()
                        .Sortable()
                                //.Sortable(sorting => sorting.Enabled(true).SortMode(GridSortMode.SingleColumn).)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(50)
                        .Read(read => read.Action("GetUserGrid", "GridData"))
                        ))</text>);
          }))
                                        </div>
    </div>
</div>
<div class="row-fluid sortable">
</div><!--/row-->
